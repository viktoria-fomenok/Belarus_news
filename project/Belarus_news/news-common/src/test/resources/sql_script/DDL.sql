CREATE SEQUENCE  "AUTHORS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "COMMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "NEWS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "ROLES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "TAGS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

    CREATE TABLE "AUTHORS"
  (	"AUTH_ID" NUMBER(20,0) NOT NULL,
	"AUTH_NAME" NVARCHAR2(30) NOT NULL,
	"AUTH_EXPIRED" TIMESTAMP (6)
   );
    CREATE TABLE "NEWS"
  (	"NEWS_ID" NUMBER(20,0) NOT NULL,
	"NEWS_TITLE" NVARCHAR2(30) NOT NULL,
	"NEWS_SHORT_TEXT" NVARCHAR2(100) NOT NULL,
	"NEWS_FULL_TEXT" NVARCHAR2(2000) NOT NULL,
	"NEWS_CREATION_DATE" TIMESTAMP (6) NOT NULL,
	"NEWS_MODIFICATION_DATE" DATE (6) NOT NULL
   );
    CREATE TABLE "TAGS"
  (	"TAG_ID" NUMBER(20,0) NOT NULL,
   	"TAG_NAME" NVARCHAR2(30) NOT NULL
   );
    CREATE TABLE "COMMENTS"
  (	"COM_ID" NUMBER(20,0) NOT NULL,
	"COM_NEWS_ID" NUMBER(20,0) NOT NULL,
	"COM_TEXT" NVARCHAR2(100) NOT NULL,
	"COM_CREATION_DATE" TIMESTAMP (6) NOT NULL
   );
    CREATE TABLE "NEWS_AUTHORS"
  (	"NA_NEWS_ID" NUMBER(20,0) NOT NULL,
	"NA_AUTHOR_ID" NUMBER(20,0) NOT NULL
   );
    CREATE TABLE "NEWS_TAGS"
  (	"NT_NEWS_ID" NUMBER(20,0) NOT NULL,
	"NT_TAG_ID" NUMBER(20,0) NOT NULL
   );
    CREATE TABLE "USERS"
  (	"USER_ID" NUMBER(20,0) NOT NULL,
   	"USER_NAME" NVARCHAR2(50) NOT NULL,
   	"USER_LOGIN" VARCHAR2(30 BYTE) NOT NULL,
   	"USER_PASSWORD" VARCHAR2(32 BYTE) NOT NULL
   );
    CREATE TABLE "ROLES"
  (	"RLS_ID" NUMBER(20,0) NOT NULL,
	"RLS_USER_ID" NUMBER(20,0) NOT NULL,
	"RLS_NAME" VARCHAR2(50 BYTE) NOT NULL
   );

  ALTER TABLE "AUTHORS" ADD CONSTRAINT "AUTHORS_PK" PRIMARY KEY ("AUTH_ID");
  ALTER TABLE "COMMENTS" ADD CONSTRAINT "COMMENTS_PK" PRIMARY KEY ("COM_ID");
  ALTER TABLE "USERS" ADD CONSTRAINT "USERS_PK" PRIMARY KEY ("USER_ID");
  ALTER TABLE "ROLES" ADD CONSTRAINT "ROLES_PK" PRIMARY KEY ("RLS_ID");
  ALTER TABLE "TAGS" ADD CONSTRAINT "TAGS_PK" PRIMARY KEY ("TAG_ID");
  ALTER TABLE "NEWS" ADD CONSTRAINT "NEWS_PK" PRIMARY KEY ("NEWS_ID")

  ALTER TABLE "COMMENTS" ADD CONSTRAINT "NEWS_COMMENTS_FK" FOREIGN KEY ("COM_NEWS_ID")
	  REFERENCES "NEWS" ("NEWS_ID") ENABLE;
  ALTER TABLE "NEWS_AUTHORS" ADD CONSTRAINT "AUTHORS_FK" FOREIGN KEY ("NA_AUTHOR_ID")
	  REFERENCES "AUTHORS" ("AUTH_ID") ENABLE;
  ALTER TABLE "NEWS_AUTHORS" ADD CONSTRAINT "NEWS_FK" FOREIGN KEY ("NA_NEWS_ID")
	  REFERENCES "NEWS" ("NEWS_ID") ENABLE;
  ALTER TABLE "NEWS_TAGS" ADD CONSTRAINT "NEWS_TAGS_FK" FOREIGN KEY ("NT_NEWS_ID")
	  REFERENCES "NEWS" ("NEWS_ID") ENABLE;
  ALTER TABLE "NEWS_TAGS" ADD CONSTRAINT "TAGS_FK" FOREIGN KEY ("NT_TAG_ID")
	  REFERENCES "TAGS" ("TAG_ID") ENABLE;
  ALTER TABLE "ROLES" ADD CONSTRAINT "ROLES_FK" FOREIGN KEY ("RLS_USER_ID")
	  REFERENCES "USERS" ("USER_ID") ENABLE;

  CREATE OR REPLACE TRIGGER "AUTHORS_TRIGGER"
    BEFORE INSERT ON AUTHORS
    FOR EACH ROW
    BEGIN
    IF :new.auth_id IS NULL THEN
    SELECT AUTHORS_SEQ.nextval INTO :new.auth_id FROM dual;
    END IF;
    END;
    /
    ALTER TRIGGER "AUTHORS_TRIGGER" ENABLE;
  CREATE OR REPLACE TRIGGER "COMMENTS_TRIGGER"
    BEFORE INSERT ON COMMENTS
    FOR EACH ROW
    BEGIN
    IF :new.com_id IS NULL THEN
    SELECT COMMENTS_SEQ.nextval INTO :new.com_id FROM dual;
    END IF;
    END;
    /
    ALTER TRIGGER "COMMENTS_TRIGGER" ENABLE;
  CREATE OR REPLACE TRIGGER "NEWS_TRIGGER"
    BEFORE INSERT ON NEWS
    FOR EACH ROW
    BEGIN
    IF :new.newsId IS NULL THEN
    SELECT NEWS_SEQ.nextval INTO :new.newsId FROM dual;
    END IF;
    END;
    /
    ALTER TRIGGER "NEWS_TRIGGER" ENABLE;
  CREATE OR REPLACE TRIGGER "ROLES_TRIGGER"
    BEFORE INSERT ON ROLES
    FOR EACH ROW
    BEGIN
    IF :new.rls_id IS NULL THEN
    SELECT ROLES_SEQ.nextval INTO :new.rls_id FROM dual;
    END IF;
    END;
    /
    ALTER TRIGGER "ROLES_TRIGGER" ENABLE;
  CREATE OR REPLACE TRIGGER "TAGS_TRIGGER"
    BEFORE INSERT ON TAGS
    FOR EACH ROW
    BEGIN
    IF :new.tagId IS NULL THEN
    SELECT TAGS_SEQ.nextval INTO :new.tagId FROM dual;
    END IF;
    END;
    /
    ALTER TRIGGER "TAGS_TRIGGER" ENABLE;
  CREATE OR REPLACE TRIGGER "USERS_TRIGGER"
    BEFORE INSERT ON USERS
    FOR EACH ROW
    BEGIN
    IF :new.user_id IS NULL THEN
    SELECT USERS_SEQ.nextval INTO :new.user_id FROM dual;
    END IF;
    END;
    /
    ALTER TRIGGER "USERS_TRIGGER" ENABLE;